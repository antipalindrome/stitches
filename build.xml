<?xml version="1.0" encoding="utf-8"?>
<project name="Stitches" basedir="." default="prod">
    

    <description>ANT build file for git://github.com/draeton/stitches</description>
    
        
    <property environment="env"/>
    <property name="repo" value="stitches"/>
    <import file="../common-targets.xml"/>
    
    
    <target name="-init" depends="-load.properties" description="Make project directory structure">
        <echo>Starting new build</echo>
        <echo>Make project directory structure</echo>
        
        <delete dir="${build.dir}"/>
        <delete dir="${docs.dir}"/>
        
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${docs.dir}"/>
    </target>

    
    <!-- skipping for now... I need jshint4java!!! -->
    <target name="jslint" depends="-load.properties" description="JSHint check">
        <echo>JSLint check</echo>
        
        <taskdef name="jslint" classname="com.googlecode.jslint4java.ant.JSLintTask" classpath="${jslint4java.jar}" />
        
        <jslint options="undef,white">
            <formatter type="plain" />
            <formatter type="plain" destfile="${build.dir}/jslint.out" />
            <fileset dir="${src.dir}">
                <include name="*.js"/>
                <exclude name="lib"/>
            </fileset>
        </jslint>
	    <echo>Finished linting</echo>
    </target>
    
    
    <target name="-readme" depends="-load.properties" description="Updating version number in README">        
        <echo>Updating version number in README.md</echo>
        
        <delete file="README.md"/>
        <copy file="${templates.dir}/README.md" tofile="README.md"/>
        <replace file="README.md" token="@VERSION@" value="${version}"/>
    </target>
    
    
    <target name="-docco" depends="-init" description="Create docs using Docco">
        <echo>Create docs using Docco</echo>
        
        <exec executable="${docco.bat}">
            <arg value="${src.dir}/main.js"/>
            <arg value="${src.dir}/icons.js"/>
            <arg value="${src.dir}/icon.js"/>
            <arg value="${src.dir}/page.js"/>
        </exec>
        <!-- clean up after docco -->
        <delete dir="-p"/>
    </target>
    
    
    <target name="-concat" depends="-init" description="Concatenation of JS and CSS">
        <echo>Concatenation of JS and CSS</echo>

        <concat destfile="${build.dir}/js/${repo}-${version}.js" force="no">
           <fileset dir="${src.dir}" includes="main.js" />
           <fileset dir="${src.dir}" includes="icons.js" />
           <fileset dir="${src.dir}" includes="icon.js" />
           <fileset dir="${src.dir}" includes="page.js" />
        </concat>
        <concat destfile="${build.dir}/css/${repo}-${version}.css" force="no">
           <fileset dir="${src.dir}" includes="${repo}.css" />
        </concat>
    </target>
    
    
    <target name="-minify" depends="-concat" description="Invoke YUI compressor">
        <echo>Invoke YUI compressor</echo>
        
        <path id="task.classpath">
            <pathelement location="${yui-compressor.jar}"/>
            <pathelement location="${yui-compressor-ant-task.jar}"/>
        </path>
        <taskdef name="yui-compressor" classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">
            <classpath refid="task.classpath"/>
        </taskdef>
        
        <yui-compressor warn="false" charset="UTF-8" fromdir="${build.dir}" todir="${build.dir}">
           <include name="js/${repo}-${version}.js" />
           <include name="css/${repo}-${version}.css" />
        </yui-compressor>
    </target>
    
    
    <target name="-copylib" depends="-init" description="Copying dependencies">
        <echo>Copying dependencies</echo>
        
       <copy todir="${build.dir}/js">
           <fileset dir="${src.dir}" includes="*.html"/>
       </copy>
        <copy todir="${build.dir}/js">
            <fileset dir="${src.dir}/lib"/>
        </copy>
    </target>
    
    
    <target name="-zip" depends="-init" description="Create a zip file for distribution">       
        <echo message="Create a zip file for distribution" />
        
        <zip destfile="${dist.dir}/${repo}-${version}.zip" basedir="${build.dir}" />
    </target>
    
    
    <target name="-commit" depends="-init" description="Commit new build to master git repo">
        <echo>Commit new build to master git repo</echo>
        
        <git command="add">
            <args><arg line="."/></args>
        </git>
        <git command="commit">
            <args><arg value="-am Build ${version} - ${commit.message}"/></args>
        </git>
        <git command="push">
            <args>
                <arg value="origin"/>
                <arg value="master"/>
            </args>
        </git>
    </target>
    
    
    <target name="-gh-pages" depends="-load.properties" description="Push new changes to gh-pages">
        <echo>Push new changes to gh-pages</echo>
        
        <echo>copy new index.md to gh-pages and update version number</echo>
        <delete file="${gh-pages.dir}/index.md"/>
        <copy file="${templates.dir}/index.md" tofile="${gh-pages.dir}/index.md"/>
        <replace file="${gh-pages.dir}/index.md" token="@VERSION@" value="${version}"/>
        
        <echo>copy new dist to gh-pages dist</echo>
        <copy file="${dist.dir}/${repo}-${version}.zip" tofile="${gh-pages.dir}/dist/${repo}-${version}.zip"/>
        
        <echo>delete css and js, and copy new from build dir</echo>
        <delete dir="${gh-pages.dir}/css"/>
        <delete dir="${gh-pages.dir}/js"/>
        <mkdir dir="${gh-pages.dir}/css"/>
        <mkdir dir="${gh-pages.dir}/js"/>        
        <copy todir="${gh-pages.dir}/css">
            <fileset dir="${build.dir}/css" includes="*.css"/>
        </copy>
        <copy todir="${gh-pages.dir}/js">
            <fileset dir="${build.dir}/js" includes="*.js"/>
        </copy>
        
        <echo>delete docs, and copy new docs</echo>
        <delete dir="${gh-pages.dir}/docs"/>        
        <copy todir="${gh-pages.dir}/docs">
            <fileset dir="${docs.dir}" includes="**"/>
        </copy>
    </target>
    
    
    <target name="-gh-pages-commit" depends="-gh-pages" description="Commit new build to gh-pages git repo">
        <echo>Commit new build to gh-pages git repo</echo>
        
        <git command="add" dir="${gh-pages.dir}">
            <args><arg line="."/></args>
        </git>
        <git command="commit" dir="${gh-pages.dir}">
            <args><arg value="-am Build ${version} - ${commit.message}"/></args>
        </git>
        <git command="push" dir="${gh-pages.dir}">
            <args>
                <arg value="origin"/>
                <arg value="gh-pages"/>
            </args>
        </git>
    </target>

    
    <target name="-increment" depends="-load.properties" description="Increment build number">
        <echo>Increment build number</echo>
        
        <propertyfile file="build.properties">
            <entry key="build.number" type="int" operation="+" default="0"/>
        </propertyfile>
    </target>
    
    
    <!-- * build * -->
    <target name="prod"
        description="Builds project files for production use"
        depends="
            -load.properties,
            -init,
            -readme,
            -docco,
            -concat,
            -minify,
            -copylib,
            -zip,
            -commit,
            -gh-pages-commit,
            -increment">
    </target>
    
    
</project>